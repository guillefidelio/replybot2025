# Code Duplication & Refactoring - Improvement Tasks

## Overview
Address critical code duplication across the codebase by creating shared utility modules and refactoring repeated patterns.
## Tasks

### [ ] 1. Create Shared UI Utilities Module
- [ ] 1.1 Create `src/utils/ui-utils.ts` file
- [ ] 1.2 Extract and consolidate `showNotification` function from:
  - [ ] `src/features/iframe-detector/trust_mode_handler.ts`
  - [ ] `src/features/iframe-detector/bulk_processing_manager.ts`
  - [ ] `src/features/iframe-detector/click_handler.ts`
  - [ ] `src/features/iframe-detector/iframe_bulk_processor.ts`
  - [ ] `src/content/content.ts`
- [ ] 1.3 Create standardized notification interface:
  ```typescript
  interface NotificationOptions {
    message: string;
    type: 'success' | 'error' | 'info' | 'warning';
    duration?: number;
    position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
    dismissible?: boolean;
  }
  ```
- [ ] 1.4 Add animation utilities for consistent UI transitions
- [ ] 1.5 Create modal utilities for confirmation dialogs
- [ ] 1.6 Update all files to use the new shared notification function
- [ ] 1.7 Remove duplicate notification code from all files

### [ ] 2. Create Shared Settings Management Module
- [ ] 2.1 Create `src/utils/settings-manager.ts` file
- [ ] 2.2 Extract and consolidate settings loading patterns from:
  - [ ] `src/features/iframe-detector/trust_mode_handler.ts`
  - [ ] `src/features/iframe-detector/bulk_processing_manager.ts`
  - [ ] `src/features/iframe-detector/iframe_bulk_processor.ts`
  - [ ] `src/content/content.ts`
- [ ] 2.3 Implement settings caching to reduce Chrome storage calls
- [ ] 2.4 Create settings validation and default value handling
- [ ] 2.5 Add settings change listeners for real-time updates
- [ ] 2.6 Create typed interfaces for all settings:
  ```typescript
  interface ExtensionSettings {
    trustModes: TrustModeSettings;
    rateLimit: number;
    model: string;
    temperature: number;
    maxTokens: number;
    maxPages: number;
    prompts: Record<string, string>;
  }
  ```
- [ ] 2.7 Update all files to use the centralized settings manager
- [ ] 2.8 Remove duplicate settings loading code

### [ ] 3. Create Rating Parser Utility
- [ ] 3.1 Create `src/utils/rating-parser.ts` file
- [ ] 3.2 Consolidate rating parsing logic from:
  - [ ] `src/features/iframe-detector/iframe_bulk_processor.ts`
  - [ ] `src/features/iframe-detector/click_handler.ts`
- [ ] 3.3 Support multiple languages and rating formats:
  - [ ] Spanish: "5 de 5 estrellas"
  - [ ] English: "5 out of 5 stars"
  - [ ] Numeric: "5/5", "5"
  - [ ] Alternative formats
- [ ] 3.4 Add comprehensive test coverage for rating parsing
- [ ] 3.5 Update all files to use the shared rating parser
- [ ] 3.6 Remove duplicate rating parsing functions

### [ ] 4. Create Modal Component System
- [ ] 4.1 Create `src/utils/modal-utils.ts` file
- [ ] 4.2 Extract and consolidate modal creation code from:
  - [ ] `src/features/iframe-detector/iframe_bulk_processor.ts`
  - [ ] `src/content/content.ts`
- [ ] 4.3 Create reusable modal components:
  - [ ] Confirmation modal
  - [ ] Alert modal
  - [ ] Custom content modal
- [ ] 4.4 Ensure iframe-safe modal implementation (no browser confirm/alert)
- [ ] 4.5 Add consistent styling and animations
- [ ] 4.6 Support keyboard navigation and accessibility
- [ ] 4.7 Update all files to use shared modal system
- [ ] 4.8 Remove duplicate modal code

### [ ] 5. Create DOM Utilities Enhancement
- [ ] 5.1 Enhance existing `src/utils/dom-utils.ts` file
- [ ] 5.2 Add missing safe DOM manipulation functions:
  - [ ] `safeSetAttribute`
  - [ ] `safeAddEventListener`
  - [ ] `safeRemoveEventListener`
  - [ ] `safeScrollIntoView`
- [ ] 5.3 Create element creation utilities:
  - [ ] `createElement` with type safety
  - [ ] `createButton` with consistent styling
  - [ ] `createContainer` with standard classes
- [ ] 5.4 Add DOM validation utilities:
  - [ ] `isElementVisible`
  - [ ] `isElementInViewport`
  - [ ] `hasRequiredAttributes`
- [ ] 5.5 Update all files to use enhanced DOM utilities

### [ ] 6. Create Message Passing Utilities
- [ ] 6.1 Create `src/utils/message-utils.ts` file
- [ ] 6.2 Consolidate Chrome runtime message patterns from:
  - [ ] `src/components/StorageQuota.tsx`
  - [ ] `src/components/DataManager.tsx`
  - [ ] Various content scripts
- [ ] 6.3 Create typed message interfaces:
  ```typescript
  interface MessageRequest<T = any> {
    type: string;
    data?: T;
    timestamp: number;
  }
  
  interface MessageResponse<T = any> {
    success: boolean;
    data?: T;
    error?: string;
  }
  ```
- [ ] 6.4 Add message validation and error handling
- [ ] 6.5 Create helper functions for common message patterns
- [ ] 6.6 Update all files to use centralized message utilities

### [ ] 7. Code Quality and Documentation
- [ ] 7.1 Add comprehensive JSDoc comments to all new utility functions
- [ ] 7.2 Create usage examples for each utility module
- [ ] 7.3 Add TypeScript strict mode compliance
- [ ] 7.4 Run ESLint and fix all warnings/errors
- [ ] 7.5 Create unit tests for all utility functions
- [ ] 7.6 Update README with new utility module documentation
- [ ] 7.7 Create migration guide for developers

## Success Criteria
- [ ] Reduce code duplication by 80%+ across identified files
- [ ] All utility functions have comprehensive test coverage
- [ ] No breaking changes to existing functionality
- [ ] Improved bundle size due to better tree-shaking
- [ ] Consistent UI/UX across all components
- [ ] Faster development of new features using shared utilities

## Relevant Files
### Files to Modify
- `src/features/iframe-detector/trust_mode_handler.ts`
- `src/features/iframe-detector/bulk_processing_manager.ts`
- `src/features/iframe-detector/click_handler.ts`
- `src/features/iframe-detector/iframe_bulk_processor.ts`
- `src/content/content.ts`
- `src/components/StorageQuota.tsx`
- `src/components/DataManager.tsx`
- `src/utils/dom-utils.ts`

### Files to Create
- `src/utils/ui-utils.ts` - Centralized UI components and notifications
- `src/utils/settings-manager.ts` - Unified settings handling with caching
- `src/utils/rating-parser.ts` - Single rating parsing utility with multi-language support
- `src/utils/modal-utils.ts` - Reusable modal system
- `src/utils/message-utils.ts` - Chrome runtime message utilities

## Notes
- This refactoring should be done incrementally to avoid breaking existing functionality
- Each utility module should be thoroughly tested before integration
- Consider backward compatibility during the transition period
- Document all breaking changes and provide migration paths