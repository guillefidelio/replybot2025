import { UserMigrationService } from './UserMigrationService';
import { MigrationService } from './MigrationService';
import { doc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';
import type { User } from 'firebase/auth';

// Mock Firebase modules
jest.mock('firebase/firestore', () => ({
  doc: jest.fn(),
  getDoc: jest.fn(),
  updateDoc: jest.fn(),
  serverTimestamp: jest.fn(() => ({ seconds: Date.now() / 1000, nanoseconds: 0 })),
}));

jest.mock('../firebase', () => ({
  db: {},
}));

jest.mock('./MigrationService');

describe.skip('UserMigrationService', () => {
  const mockUser: User = {
    uid: 'test-user-123',
    email: 'test@example.com',
    displayName: 'Test User',
  } as User;

  const mockDocRef = { id: 'test-user-123' };
  const mockedDoc = doc as jest.MockedFunction<typeof doc>;
  const mockedGetDoc = getDoc as jest.MockedFunction<typeof getDoc>;
  const mockedUpdateDoc = updateDoc as jest.MockedFunction<typeof updateDoc>;
  const mockedMigrationService = MigrationService as jest.Mocked<typeof MigrationService>;

  beforeEach(() => {
    jest.clearAllMocks();
    mockedDoc.mockReturnValue(mockDocRef as any);
    console.log = jest.fn();
    console.error = jest.fn();
    console.warn = jest.fn();
  });

  describe('checkAndMigrateUser', () => {
    it('should return success false when user document does not exist', async () => {
      mockedGetDoc.mockResolvedValue({
        exists: () => false,
      } as any);

      const result = await UserMigrationService.checkAndMigrateUser(mockUser);

      expect(result).toEqual({
        migrated: false,
        success: true,
      });
    });

    it('should return success true when user already has payment structure', async () => {
      const userData = {
        subscription: { plan: 'free', status: 'active', currentPeriodStart: new Date(), currentPeriodEnd: new Date() },
        credits: { available: 10, used: 0, total: 10, resetDate: new Date() },
        features: { bulkPositive: false, bulkAll: false, customPrompts: false },
        preferences: { notifications: { lowCredits: true } },
        migrationVersion: '1.0.0',
      };

      mockedGetDoc.mockResolvedValue({
        exists: () => true,
        data: () => userData,
      } as any);

      const result = await UserMigrationService.checkAndMigrateUser(mockUser);

      expect(result).toEqual({
        migrated: false,
        success: true,
      });
      expect(console.log).toHaveBeenCalledWith(
        `User ${mockUser.email} already has payment system structure`
      );
    });

    it('should migrate user when payment fields are missing', async () => {
      const incompleteUserData = {
        uid: 'test-user-123',
        email: 'test@example.com',
        createdAt: new Date(),
        // Missing payment fields
      };

      mockedGetDoc.mockResolvedValue({
        exists: () => true,
        data: () => incompleteUserData,
      } as any);

      mockedUpdateDoc.mockResolvedValue(undefined);

      const result = await UserMigrationService.checkAndMigrateUser(mockUser);

      expect(result).toEqual({
        migrated: true,
        success: true,
      });

      expect(mockedUpdateDoc).toHaveBeenCalledWith(
        mockDocRef,
        expect.objectContaining({
          uid: 'test-user-123',
          email: 'test@example.com',
          subscription: expect.objectContaining({
            plan: 'free',
            status: 'active',
          }),
          credits: expect.objectContaining({
            available: 15, // Legacy users get bonus credits
            total: 15,
          }),
          features: expect.objectContaining({
            bulkPositive: false,
            bulkAll: false,
            customPrompts: false,
          }),
          preferences: expect.objectContaining({
            notifications: expect.objectContaining({
              lowCredits: true,
              monthlyUsage: true,
              billingReminders: false, // Don't overwhelm legacy users
            }),
          }),
          migrationVersion: '1.0.0',
          migrationSource: 'login_auto_migration',
        })
      );
    });

    it('should preserve existing valid payment data during migration', async () => {
      const partialUserData = {
        uid: 'test-user-123',
        email: 'test@example.com',
        subscription: { plan: 'starter', status: 'active', currentPeriodStart: new Date(), currentPeriodEnd: new Date() },
        // Missing credits, features, preferences
      };

      mockedGetDoc.mockResolvedValue({
        exists: () => true,
        data: () => partialUserData,
      } as any);

      mockedUpdateDoc.mockResolvedValue(undefined);

      const result = await UserMigrationService.checkAndMigrateUser(mockUser);

      expect(result).toEqual({
        migrated: true,
        success: true,
      });

      expect(mockedUpdateDoc).toHaveBeenCalledWith(
        mockDocRef,
        expect.objectContaining({
          subscription: partialUserData.subscription, // Should preserve existing subscription
          credits: expect.objectContaining({
            available: 15,
          }),
          features: expect.any(Object),
          preferences: expect.any(Object),
        })
      );
    });

    it('should handle migration timeout', async () => {
      mockedGetDoc.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 15000)));

      const result = await UserMigrationService.checkAndMigrateUser(mockUser);

      expect(result).toEqual({
        migrated: false,
        success: false,
        error: 'Migration timeout',
      });
    });

    it('should handle migration errors gracefully', async () => {
      mockedGetDoc.mockRejectedValue(new Error('Firestore error'));

      const result = await UserMigrationService.checkAndMigrateUser(mockUser);

      expect(result).toEqual({
        migrated: false,
        success: false,
        error: 'Firestore error',
      });
    });

    it('should handle update doc failure', async () => {
      const incompleteUserData = { uid: 'test-user-123' };

      mockedGetDoc.mockResolvedValue({
        exists: () => true,
        data: () => incompleteUserData,
      } as any);

      mockedUpdateDoc.mockRejectedValue(new Error('Update failed'));

      const result = await UserMigrationService.checkAndMigrateUser(mockUser);

      expect(result).toEqual({
        migrated: false,
        success: false,
        error: 'Update failed',
      });
    });
  });

  describe('batchMigrateUsers', () => {
    it('should migrate multiple users successfully', async () => {
      const userIds = ['user1', 'user2', 'user3'];
      mockedMigrationService.migrateUser
        .mockResolvedValueOnce(true)
        .mockResolvedValueOnce(true)
        .mockResolvedValueOnce(false);

      const progressCallback = jest.fn();
      const result = await UserMigrationService.batchMigrateUsers(userIds, progressCallback);

      expect(result).toEqual({
        successful: 2,
        failed: 1,
        errors: [{ userId: 'user3', error: 'Migration returned false' }],
      });

      expect(progressCallback).toHaveBeenCalledTimes(3);
      expect(progressCallback).toHaveBeenLastCalledWith({
        completed: 3,
        total: 3,
        currentUser: 'user3',
      });
    });

    it('should handle migration errors in batch', async () => {
      const userIds = ['user1', 'user2'];
      mockedMigrationService.migrateUser
        .mockResolvedValueOnce(true)
        .mockRejectedValueOnce(new Error('Migration error'));

      const result = await UserMigrationService.batchMigrateUsers(userIds);

      expect(result).toEqual({
        successful: 1,
        failed: 1,
        errors: [{ userId: 'user2', error: 'Migration error' }],
      });
    });
  });

  describe('getMigrationStats', () => {
    it('should return migration statistics from MigrationService', async () => {
      const mockStats = {
        totalUsers: 100,
        migratedUsers: 75,
        pendingMigration: 25,
        migrationRate: 75,
      };

      mockedMigrationService.getMigrationStatus.mockResolvedValue(mockStats);

      const result = await UserMigrationService.getMigrationStats();

      expect(result).toEqual(mockStats);
    });

    it('should return default stats on error', async () => {
      mockedMigrationService.getMigrationStatus.mockRejectedValue(new Error('Stats error'));

      const result = await UserMigrationService.getMigrationStats();

      expect(result).toEqual({
        totalUsers: 0,
        migratedUsers: 0,
        pendingMigration: 0,
        migrationRate: 0,
      });
    });
  });

  describe('validation methods', () => {
    it('should validate subscription data correctly', async () => {
      const validSubscription = {
        plan: 'free',
        status: 'active',
        currentPeriodStart: new Date(),
        currentPeriodEnd: new Date(),
      };

      const invalidSubscription = {
        plan: 'free',
        // Missing required fields
      };

      // Access private method for testing
      const isValidSubscription = (UserMigrationService as any).isValidSubscription;

      expect(isValidSubscription(validSubscription)).toBe(true);
      expect(isValidSubscription(invalidSubscription)).toBe(false);
      expect(isValidSubscription(null)).toBe(false);
      expect(isValidSubscription(undefined)).toBe(false);
    });

    it('should validate credits data correctly', async () => {
      const validCredits = {
        available: 10,
        used: 5,
        total: 15,
        resetDate: new Date(),
      };

      const invalidCredits = {
        available: 'invalid',
        used: 5,
      };

      const isValidCredits = (UserMigrationService as any).isValidCredits;

      expect(isValidCredits(validCredits)).toBe(true);
      expect(isValidCredits(invalidCredits)).toBe(false);
      expect(isValidCredits(null)).toBe(false);
    });

    it('should validate features data correctly', async () => {
      const validFeatures = {
        bulkPositive: false,
        bulkAll: false,
        customPrompts: true,
        analytics: false,
      };

      const invalidFeatures = {
        bulkPositive: 'invalid',
      };

      const isValidFeatures = (UserMigrationService as any).isValidFeatures;

      expect(isValidFeatures(validFeatures)).toBe(true);
      expect(isValidFeatures(invalidFeatures)).toBe(false);
      expect(isValidFeatures(null)).toBe(false);
    });

    it('should validate preferences data correctly', async () => {
      const validPreferences = {
        notifications: {
          lowCredits: true,
          monthlyUsage: false,
        },
        autoUpgrade: false,
      };

      const invalidPreferences = {
        notifications: null,
      };

      const isValidPreferences = (UserMigrationService as any).isValidPreferences;

      expect(isValidPreferences(validPreferences)).toBe(true);
      expect(isValidPreferences(invalidPreferences)).toBe(false);
      expect(isValidPreferences(null)).toBe(false);
    });
  });

  describe('needsPaymentMigration', () => {
    it('should detect when migration is needed', async () => {
      const needsPaymentMigration = (UserMigrationService as any).needsPaymentMigration;

      // User without payment fields
      expect(needsPaymentMigration({})).toBe(true);

      // User with incomplete payment fields
      expect(needsPaymentMigration({
        subscription: { plan: 'free' }, // Incomplete
      })).toBe(true);

      // User with wrong migration version
      expect(needsPaymentMigration({
        subscription: { plan: 'free', status: 'active', currentPeriodStart: new Date(), currentPeriodEnd: new Date() },
        credits: { available: 10, used: 0, total: 10, resetDate: new Date() },
        features: { bulkPositive: false, bulkAll: false, customPrompts: false },
        preferences: { notifications: { lowCredits: true } },
        migrationVersion: '0.9.0', // Wrong version
      })).toBe(true);

      // User with complete and correct payment fields
      expect(needsPaymentMigration({
        subscription: { plan: 'free', status: 'active', currentPeriodStart: new Date(), currentPeriodEnd: new Date() },
        credits: { available: 10, used: 0, total: 10, resetDate: new Date() },
        features: { bulkPositive: false, bulkAll: false, customPrompts: false },
        preferences: { notifications: { lowCredits: true } },
        migrationVersion: '1.0.0',
      })).toBe(false);
    });
  });

  describe('createLegacyUserPaymentData', () => {
    it('should create correct default payment data for legacy users', async () => {
      const createLegacyUserPaymentData = (UserMigrationService as any).createLegacyUserPaymentData;
      const paymentData = createLegacyUserPaymentData();

      expect(paymentData.subscription.plan).toBe('free');
      expect(paymentData.subscription.status).toBe('active');
      expect(paymentData.credits.available).toBe(15); // Bonus credits for legacy users
      expect(paymentData.credits.total).toBe(15);
      expect(paymentData.features.bulkPositive).toBe(false);
      expect(paymentData.preferences.notifications.billingReminders).toBe(false); // Don't overwhelm legacy users
      expect(paymentData.preferences.autoUpgrade).toBe(false);
    });
  });
}); 